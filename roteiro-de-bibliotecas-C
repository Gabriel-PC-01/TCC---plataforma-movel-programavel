ğŸ“Œ Roteiro de Aprendizado em C para LocalizaÃ§Ã£o no RobÃ´
ğŸ”¹ Semana 1 â€” Fundamentos no Raspberry Pi em C

Essas bibliotecas sÃ£o para a localizaÃ§Ã£o do robÃµ. Elas poderÃ£o ser uteis
durante o desenvolvimento.


Objetivo: ganhar prÃ¡tica em GPIO, IÂ²C e cÃ¢mera.

Passos:

Instalar bibliotecas bÃ¡sicas em C:

libi2c-dev â†’ para sensores IÂ²C.

pigpio â†’ para GPIO com precisÃ£o.

libopencv-dev â†’ para usar cÃ¢mera e visÃ£o computacional.

Fazer um programa simples em C que:

Acenda um LED pelo GPIO.

Leia um botÃ£o pelo GPIO.

Capture uma imagem com OpenCV em C (cv::VideoCapture).

Meta: entender como manipular hardware + cÃ¢mera no Raspberry Pi usando C.

ğŸ”¹ Semana 2 â€” ToF (VL53L0X / VL53L1X)

Objetivo: ler distÃ¢ncias em tempo real.

Passos:

Baixar a API oficial da STMicroelectronics (C).

Compilar e rodar exemplos de leitura no Raspberry via IÂ²C.

Mostrar no terminal a distÃ¢ncia medida em milÃ­metros.

ExercÃ­cio: fazer o robÃ´ detectar quando hÃ¡ uma parede a menos de 20 cm e acender um LED de alerta.

ğŸ”¹ Semana 3 â€” Odometria com Encoders

Objetivo: contar pulsos e converter em deslocamento.

Passos:

Conectar encoders das rodas ao GPIO.

Usar pigpio para criar interrupts que contam pulsos.

Implementar a fÃ³rmula bÃ¡sica:

distaË†ncia=pulsospulsos por voltaÃ—Ï€Ã—diaË†metro da roda
dist
a
Ë†
ncia=
pulsos por volta
pulsos
	â€‹

Ã—Ï€Ã—di
a
Ë†
metro da roda

ExercÃ­cio: mover o robÃ´ 1 metro e verificar no terminal se a odometria bateu.

Extra: calibrar se houver erro (medindo o real vs. calculado).

ğŸ”¹ Semana 4 â€” VisÃ£o Computacional com AprilTags / QR

Objetivo: identificar marcadores no ambiente.

Passos (AprilTags):

Baixar AprilRobotics/apriltag
